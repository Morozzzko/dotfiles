#!/usr/bin/env ruby
# frozen_string_literal: true

dest = ARGF.argv.first

branch_name = `git rev-parse --abbrev-ref HEAD`.strip


CONVENTIONAL_TYPES = [
  'build',
  'chore',
  'ci',
  'docs',
  'feat',
  'fix',
  'perf',
  'refactor',
  'revert',
  'style',
  'test'
].join('|')

REGEX_CONVENTIONAL = /^((?<type>#{CONVENTIONAL_TYPES}{3,})(?<delimiter>[-\/]+))?(?<ticket>((?<source>[[:alpha:]]*)-?)\d+)\k<delimiter>(?<description>.*)$/

REGEX_NORMAL = /^(?<ticket>((?<source>[[:alpha:]]*)-?)\d+)(?<delimiter>[-\/]+)(?<description>.*)$/

def parse_branch(branch_name)
  REGEX_CONVENTIONAL.match(branch_name) || REGEX_NORMAL.match(branch_name)
end

match = parse_branch(branch_name)

def decide_source(match)
  source = match[:source]

  if source == 'rollbar' || source == 'rb'
    :rollbar
  elsif source.empty?
    :github
  else
    :jira
  end
end

if match && !ARGF.argv.include?('HEAD')
  ticket = case decide_source(match)
           when :rollbar
             match[:ticket].gsub('-', '#').upcase
           else
             match[:ticket].upcase
           end

  prefix = if match.named_captures.key?(:type) && match[:type]
             "#{match[:type]}:"
           else
             ''
           end

  ticket_string = [prefix, "[#{ticket}]"].reject(&:empty?).join(' ')

  content = File.read(dest)

  description, *_rest = content.split('------------------------ >8 ------------------------')

  comment = ->(string) { string.start_with?('#', ';') }

  clean_description = description.split("\n").map(&:strip).reject(&:empty?).reject(&comment).join("\n")

  puts clean_description

  File.write(dest, "#{ticket_string} \n" + content) if clean_description.empty?
end
